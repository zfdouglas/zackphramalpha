{"version":3,"sources":["Assets/logo.svg","Hooks/CalculateHook.tsx","Components/Calculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["equation","numberArr","Array","operatorArr","operators","getNumberToAdd","i","eq","currentNumberString","iter","length","includes","charAt","priorityOrder","operator","solveSubequation","leftNumStr","rightNumStr","peekValue","pop","push","currentOperator","value","y","parseFloat","x","substract","add","divide","toString","calculateEquation","calculateProblemHook","input","replace","currentValue","undefined","fullNumber","resolveEquation","Calculator","props","useState","setEquation","setResult","clearEquation","computedValue","solved","className","onSubmit","event","preventDefault","parseInt","test","isEquationValid","resultOfComputation","isNaN","alert","type","id","placeholder","onChange","e","target","onClick","App","result","hasSolution","setHasSolution","src","logo","alt","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee4c9e50.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","let equation = \"\";\r\nlet numberArr = new Array<string>();\r\nlet operatorArr = new Array<string>();\r\nconst operators = [\"*\", \"+\", \"/\", \"-\"];\r\n\r\nconst calculateProblemHook = (input: string) => {\r\n  equation = input;\r\n  return resolveEquation();\r\n};\r\n\r\nfunction resolveEquation() {\r\n  let eq = equation;\r\n  eq = eq.replace(\" \", \"\");\r\n\r\n  for (let i = 0; i < eq.length; i++) {\r\n    let currentValue = eq.charAt(i);\r\n    //If the current value is an operator\r\n    if (operators.includes(currentValue)) {\r\n      //checks if currentValue is a minus and previous character was an operator, if so, the value is negative\r\n      if (\r\n        currentValue === \"-\" &&\r\n        (i === 0 || operators.includes(eq.charAt(i - 1)))\r\n      ) {\r\n        i++;\r\n        let fullNumber = getNumberToAdd(i, eq);\r\n        if (fullNumber.length > 1) {\r\n          i += fullNumber.length - 1;\r\n        }\r\n        fullNumber = \"-\" + fullNumber;\r\n        numberArr.push(fullNumber);\r\n      } else if (\r\n        operatorArr.length === 0 ||\r\n        priorityOrder(currentValue) >\r\n          priorityOrder(operatorArr[operatorArr.length - 1])\r\n      ) {\r\n        //if multiplication or division is current operator and the top of the stack is addition or subtraction, just add the operator to the stack\r\n        operatorArr.push(currentValue);\r\n      } else {\r\n        //if the current operator is addition or subtraction, we want to solve things in stack that have higher priority until we can't anymore, then add operator. Maintaining PEMDAS priority. This also ascertains we are working left to right.\r\n        while (\r\n          operatorArr.length !== 0 &&\r\n          priorityOrder(currentValue) <=\r\n            priorityOrder(operatorArr[operatorArr.length - 1])\r\n        ) {\r\n          let currentOperator = operatorArr.pop();\r\n          if (currentOperator !== undefined) {\r\n            solveSubequation(currentOperator);\r\n          }\r\n        }\r\n        operatorArr.push(currentValue);\r\n      }\r\n    } else {\r\n      let fullNumber = getNumberToAdd(i, eq);\r\n      if (fullNumber.length > 1) {\r\n        i += fullNumber.length - 1;\r\n      }\r\n      numberArr.push(fullNumber);\r\n    }\r\n    //TODO else if(parentheseHandling){}\r\n  }\r\n  //Resolve Subequations if there are operators left on the array at the end\r\n  while (operatorArr.length !== 0) {\r\n    let operator = operatorArr.pop();\r\n    if (operator !== undefined) {\r\n      solveSubequation(operator);\r\n    }\r\n  }\r\n  //Final answer will be the only value left in the number array, return it\r\n  if (numberArr[numberArr.length - 1] !== undefined) {\r\n    return numberArr.pop();\r\n  }\r\n}\r\n\r\nfunction getNumberToAdd(i: number, eq: string) {\r\n  let currentNumberString = \"\";\r\n  let iter = i;\r\n  for (iter; iter < eq.length; iter++) {\r\n    if (operators.includes(eq.charAt(iter))) {\r\n      iter -= 1;\r\n      break;\r\n    } else {\r\n      currentNumberString += eq.charAt(iter);\r\n    }\r\n  }\r\n  return currentNumberString;\r\n}\r\n\r\n//Will return 1 (higher priority) for multiplication or division operator, else (aka for + or -) will return 0\r\nfunction priorityOrder(operator: string) {\r\n  if (operator === \"*\" || operator === \"/\") {\r\n    return 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nfunction add(x: string, y: string) {\r\n  return parseFloat(x) + parseFloat(y);\r\n}\r\n\r\nfunction substract(x: string, y: string) {\r\n  return parseFloat(x) - parseFloat(y);\r\n}\r\n\r\nfunction divide(x: string, y: string) {\r\n  return parseFloat(x) / parseFloat(y);\r\n}\r\n\r\nfunction multiply(x: string, y: string) {\r\n  return parseFloat(x) * parseFloat(y);\r\n}\r\n\r\nfunction solveSubequation(operator: string) {\r\n  let peekValue = numberArr.length - 1;\r\n  //going through and get right off the top first, and then get the left, then pass into switch\r\n  //not using popped value because that gives possibility of undefined\r\n  let leftNumStr = \"\";\r\n  let rightNumStr = \"\";\r\n  rightNumStr = numberArr[peekValue];\r\n  numberArr.pop();\r\n  peekValue -= 1;\r\n  leftNumStr = numberArr[peekValue];\r\n  numberArr.pop();\r\n  peekValue -= 1;\r\n  numberArr.push(calculateEquation(leftNumStr, rightNumStr, operator));\r\n}\r\n\r\nfunction calculateEquation(\r\n  leftNumStr: string,\r\n  rightNumStr: string,\r\n  currentOperator: string\r\n) {\r\n  let value = 0;\r\n  switch (currentOperator) {\r\n    case \"*\":\r\n      value = multiply(leftNumStr, rightNumStr);\r\n      break;\r\n    case \"-\":\r\n      value = substract(leftNumStr, rightNumStr);\r\n      break;\r\n    case \"+\":\r\n      value = add(leftNumStr, rightNumStr);\r\n      break;\r\n    case \"/\":\r\n      value = divide(leftNumStr, rightNumStr);\r\n      break;\r\n  }\r\n  return value.toString();\r\n}\r\nexport default calculateProblemHook;\r\n","import React, { FormEvent, useState } from \"react\";\r\nimport calculateProblemHook from \"../Hooks/CalculateHook\";\r\nimport \"../App.css\";\r\n\r\ntype CalculatorProps = {\r\n  computedValue: Function;\r\n  solved: Function;\r\n};\r\n\r\nexport const Calculator = (props: CalculatorProps) => {\r\n  const [equation, setEquation] = useState(\"\");\r\n  const [result, setResult] = useState(0);\r\n\r\n  // Takes submit event from Calculator component, and will return an evaluated solution if the equation retrieved from equation state is valid.Otherwise will alert to the input being invalid.\r\n  const computeProblem = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    if (equation !== \"\") {\r\n      setResult(0);\r\n      if (equation.length === 1) {\r\n        setResult(parseInt(equation));\r\n      } else if (isEquationValid(equation)) {\r\n        let resultOfComputation = calculateProblemHook(equation);\r\n        if (resultOfComputation !== undefined) {\r\n          if (isNaN(parseFloat(resultOfComputation))) {\r\n            alert(\r\n              \"Something has gone wrong in computing this equation. Please check equation input is valid or try another equation.\"\r\n            );\r\n            clearEquation();\r\n          } else {\r\n            setResult(parseFloat(resultOfComputation));\r\n            props.solved(true);\r\n            props.computedValue(parseFloat(resultOfComputation));\r\n          }\r\n        } else {\r\n          alert(\r\n            \"Something has gone wrong in computing this equation. Please check inputs or try another equation.\"\r\n          );\r\n        }\r\n      } else {\r\n        clearEquation();\r\n        alert(\r\n          \"Invalid equation. Please make sure your equation contains only valid characters. For accepted inputs please refer to the documentation tab.\"\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  function isEquationValid(equation: string) {\r\n    //BUG: fix regex considering a value that only has a value to the right of the decimal as invalid\r\n    return /^[-0-9,0-9,.,+,-,(,),*,\\/]*$/.test(equation);\r\n  }\r\n\r\n  function clearEquation() {\r\n    setEquation(\"\");\r\n    setResult(0);\r\n    props.computedValue(0);\r\n    props.solved(false);\r\n  }\r\n  return (\r\n    <div className=\"Calculator\">\r\n      <form className=\"Calculator-form\" onSubmit={computeProblem}>\r\n        <input\r\n          className=\"Calculator-Input\"\r\n          type=\"text\"\r\n          id=\"equation\"\r\n          placeholder=\"2 + 2\"\r\n          value={equation}\r\n          onChange={(e) => setEquation(e.target.value)}\r\n        />\r\n        <input className=\"Calculator-Submit\" type=\"submit\" value=\"Compute\" />\r\n        <button className=\"Calculator-Submit\" onClick={() => clearEquation()}>\r\n          Clear\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport logo from \"./Assets/logo.svg\";\nimport \"./App.css\";\nimport { Calculator } from \"./Components/Calculator\";\n\nfunction App() {\n  const [result, setResult] = useState(null);\n  const [hasSolution, setHasSolution] = useState(false);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-header-logo\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div>ZackframAlpha</div>\n        </div>\n        <Calculator solved={setHasSolution} computedValue={setResult} />\n      </header>\n      {hasSolution ? (\n        <div className=\"App-results\">\n          <h2>Solution:</h2>\n          {result}\n        </div>\n      ) : null}\n      <footer className=\"App-footer\">\n        <a href=\"https://github.com/zfdouglas/zackphramalpha/blob/main/README.md\">\n          Click Me for Documentation\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}